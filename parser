
# PRUEBA PARSER.txt

from inspect import isclass


fileName = str(input("Input your program's file name to validate its syntax: "))

file = open(fileName, mode="r")

rawProgram = (file.read())
file.close()

program = rawProgram.replace("\n", "")
program = program.replace(" ", "")
program = program.split(";")

# El programa siempre empieza siendo correcto hasta que se pruebe lo contrario.

isCorrect = True

# TODO Loop para que vaya linea por linea chequeando que función se usa y llame la función respectiva.

for line in program:
    if program.index(line) == 0 and line.startswith("PROG") == False:
        isCorrect = False
        break
        

    if program.index(line) == (len(program) -1) and line.endswith("GORP") == False:
        isCorrect = False
        break
        


# Print dependiendo de si el programa es correcto o no

if isCorrect == True:
    print("Congratulations! Your program has valid syntax.")

else:
    print("Unfortunately your program does not have a valid syntax...")


#TODO Variable_list

"""for line in program:
    if line != "{" and line != "}":
        line = line.replace("var","")
        line = line.replace("PROG", "")
        line = line.replace("PROC", "")
        line = line.replace("")"""
# TODO J
def cName(line):
    line = line.replace("var","")
    line = line.replace("PROG", "")
    variable_list = line.split(",")
        

    if "=" in line:
        is_variable = line[0]

        if is_variable not in variable_list:
            isCorrect = False
            
        try:
            int(line[-1])
            
            

        except ValueError:
            isCorrect = False
            print("This is not a valid program")
    
    return isCorrect
    
def cWalk(line, variable_list):
    if "walk" in line:
        first_par_index = line.index("(")
        last_par_index = line.index(")")
        is_variable = (line[first_par_index+1 : last_par_index])

        if is_variable == int:
            isCorrect == False
        if is_variable not in variable_list:
            isCorrect == False

    return isCorrect


    

# TODO N
def cJump(line, variable_list):
    if "jump" in line:
        first_par_index = line.index("(")
        last_par_index = line.index(")")
        is_variable = (line[first_par_index+1 : last_par_index])

        if is_variable == int:
            isCorrect == False
        if is_variable not in variable_list:
            isCorrect == False

    return isCorrect

    

def cJumpTo(line):
    pass

def cVeer(line):
    pass

def cLook(line):
    pass

# TODO N
def cDrop(line, variable_list):

    if "drop" in line:
        first_par_index = line.index("(")
        last_par_index = line.index(")")
        is_variable = (line[first_par_index+1 : last_par_index])

        if is_variable == int:
            isCorrect == False
        if is_variable not in variable_list:
            isCorrect == False

    return isCorrect

# TODO N
def cGrab(line, variable_list):

    if "grab" in line:
        first_par_index = line.index("(")
        last_par_index = line.index(")")
        is_variable = (line[first_par_index+1 : last_par_index])

        if is_variable == int:
            isCorrect == False
        if is_variable not in variable_list:
            isCorrect == False

    return isCorrect

# TODO N
def cGet(line, variable_list):

    if "get" in line:
        first_par_index = line.index("(")
        last_par_index = line.index(")")
        is_variable = (line[first_par_index+1 : last_par_index])

        if is_variable == int:
            isCorrect == False
        if is_variable not in variable_list:
            isCorrect == False
        
    return isCorrect
    

# TODO N
def cFree(line, variable_list):

    if "free" in line:
        first_par_index = line.index("(")
        last_par_index = line.index(")")
        is_variable = (line[first_par_index+1 : last_par_index])

        if is_variable == int:
            isCorrect == False
        if is_variable not in variable_list:
            isCorrect == False
    
    return isCorrect
    

# TODO N
def cPop(line, variable_list):

    if "pop" in line:
        first_par_index = line.index("(")
        last_par_index = line.index(")")
        is_variable = (line[first_par_index+1 : last_par_index])

        if is_variable == int:
            isCorrect == False
        if is_variable not in variable_list:
            isCorrect == False
    
    return isCorrect

def cWalk2variables(line):
    pass

# TODO N
def cConditionals(line):
    """open_parenth_size = 0
    close_parenth_size = 0
    for i in line:
        if i == "(":
            open_parenth_size += 1
        if i == ")":
            close_parenth_size += 1
    
    if open_parenth_size != close_parenth_size:
        isCorrect = False
    line.split("(")
    line.split(")")"""
    def contar_parentesis(texto):

        open_parenth = 0
        close_parenth = 0

        for i in texto:
            if i == "(":
                open_parenth += 1
        
            elif i == ")":
                close_parenth +=1
    
        return open_parenth + close_parenth

    def contar_brackets(texto):

        open_bracket = 0
        close_bracket = 0

        for i in texto:
            if i == "{":
                open_bracket += 1
        
            elif i == "}":
                close_bracket +=1
    
        return open_bracket + close_bracket

    def separar_condicional_en_partes(texto:str):

        #texto = "if(canWalk(west,1)){walk(west,1)}fi"

        partes = []

        for i in texto:
            if i == "{":
                partes.append(texto[0 : texto.index(i)])
                partes.append(texto[texto.index(i) : len(texto)])
        return partes
    

    


    def separar_en_tokens(texto:str):

        #texto = "i f ( canWalk ( west ,1) ) { walk( west ,1) } fi"
        texto = texto.replace(" ", "")
        texto = texto.replace("if", "")
        texto = texto.replace("fi", "")
        #print(texto)

        tokens = []
        #token_found = False
        for i in texto:
            if i == "(":
                #print(texto.index(i))
                for j in range(1, (len(texto)-1)):
                    #print(texto[j])
                    if texto[j] == ")":
                        #token_found = True
                        ind_inf = texto.index(i)
                        ind_sup = int((j))
                        tokens.append(texto[ind_inf:ind_sup+1])
                        #print(tokens)
                        if texto.index(i) == 0:
                            #print("broo")
                            texto = texto[1:j+1] + texto[j+2:len(texto)] 
                            #print(texto)

                            break

                        else:
                            texto = texto[ind_inf+1:j] + texto[j+1:len(texto)]
                            #print(texto + "2tttt")
                            break
            
                

        #print(token_found)


        #texto = texto.split(")")
        #print(texto)
        return(tokens)


    tokens_lista = separar_en_tokens("i f ( canWalk ( west ,1) ) { walk( west ,1) } fi")
    #print(tokens_lista)


    separado = separar_condicional_en_partes("i f ( canWalk ( west ,1) ) { walk( west ,1) } fi")
#print(separado)

    tokens_parte_1 = separar_en_tokens(separado[1])
    #print(tokens_parte_1)


    def check_conditional(texto:str):
    
        if texto[-2:len(texto)] != "fi":
            return "Basura"

        if texto[2] != "(":
            return "Basura"
    
        if contar_parentesis(texto) >0 and contar_parentesis(texto) % 2 != 0:
            return "Basura"
    
        if contar_brackets(texto) > 0 and contar_brackets(texto) % 2 != 0:
            return "Basura"

        partes = separar_condicional_en_partes(texto)
        #print(partes)


        # mayor a 3 por si hay un ELSE
        if len(partes) > 3 or len(partes) == 0:
            return "Basura"
    
        if len(partes) == 2:
            condition = partes[0]

            block = partes[1]
    
        elif len(partes) == 3:
            condition = partes[0]

            block = partes[1]

            else_condition = partes[2]

        #for i in partes:
        print(separar_en_tokens(condition))
        
    
    
    



    
    
        return "Sisirvebro"

    
    

#num_parentj = contar_parentesis("i f ( canWalk ( west ,1) ) { walk( west ,1) } fi")
#print(num_parentj)
    

#check = check_conditional("if(canWalk(west,1)){walk(west,1)}fi")
#texto = "if(canWalk(west,1)){walk(west,1)}fi"
#print(check)

#print(separar_en_tokens("canWalk(west,1)"))


    return isCorrect
    

# TODO J
def cLoop(line):
    pass

# TODO J
def cRepeat(line):
    pass

# Loop Nico 
#for line in program:
#    if "var" in line:
#        line = line.replace("var","")
#        line = line.replace("PROG", "")
#        variable_list = line.split(",")
#        
#
#    if "=" in line:
#        is_variable = line[0]

#        if is_variable not in variable_list:
#            print("This is not a valid program")

#        try:
#            isInt = int(line[-1])
            

#        except ValueError:
#            print("This is not a valid program")