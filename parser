
from inspect import isclass

#Para que el programa lea el programa se debe agregar a la carpeta del proyecto e ingresar el nombre del archivo.
fileName = str(input("Input your program's file name to validate its syntax: "))
print(" ")

file = open(fileName, mode="r")

rawProgram = (file.read())
file.close()

program = rawProgram.replace("\n", "")
program = program.replace(" ", "")

# El programa siempre empieza siendo correcto hasta que se pruebe lo contrario.

isCorrect = True

# TODO Loop para que vaya linea por linea chequeando que función se usa y llame la función respectiva.

for line in program:
    if program.index(line) == 0 and line.startswith("PROG") == False:
        isCorrect = False
        break
        
# Chequeo rápido del inicio y final del programa

    if program.index(line) == (len(program) -1) and line.endswith("GORP") == False:
        isCorrect = False
        break
        


# Print dependiendo de si el programa es correcto o no

if isCorrect == True:
    print("Congratulations! Your program has valid syntax.")
    print(" ")

else:
    print("Unfortunately your program does not have a valid syntax...")


#TODO Variable_list

"""for line in program:
    if line != "{" and line != "}":
        line = line.replace("var","")
        line = line.replace("PROG", "")
        line = line.replace("PROC", "")
        line = line.replace("")"""
# TODO J
def cName(line):
    line = line.replace("var","")
    line = line.replace("PROG", "")
    variable_list = line.split(",")
        

    if "=" in line:
        is_variable = line[0]

        if is_variable not in variable_list:
            isCorrect = False
            
        try:
            int(line[-1])
            
            

        except ValueError:
            isCorrect = False
            print("This is not a valid program")
    
    return isCorrect
    
def cWalk(line, variable_list):
    if "walk" in line:
        first_par_index = line.index("(")
        last_par_index = line.index(")")
        is_variable = (line[first_par_index+1 : last_par_index])

        if is_variable == int:
            isCorrect == False
        if is_variable not in variable_list:
            isCorrect == False

    return isCorrect


    

# TODO N
def cJump(line, variable_list):
    if "jump" in line:
        first_par_index = line.index("(")
        last_par_index = line.index(")")
        is_variable = (line[first_par_index+1 : last_par_index])

        if is_variable == int:
            isCorrect == False
        if is_variable not in variable_list:
            isCorrect == False

    return isCorrect

    

def cJumpTo(line):
    pass

def cVeer(line):
    pass

def cLook(line):
    pass

# TODO N
def cDrop(line, variable_list):

    if "drop" in line:
        first_par_index = line.index("(")
        last_par_index = line.index(")")
        is_variable = (line[first_par_index+1 : last_par_index])

        if is_variable == int:
            isCorrect == False
        if is_variable not in variable_list:
            isCorrect == False

    return isCorrect

# TODO N
def cGrab(line, variable_list):

    if "grab" in line:
        first_par_index = line.index("(")
        last_par_index = line.index(")")
        is_variable = (line[first_par_index+1 : last_par_index])

        if is_variable == int:
            isCorrect == False
        if is_variable not in variable_list:
            isCorrect == False

    return isCorrect

# TODO N
def cGet(line, variable_list):

    if "get" in line:
        first_par_index = line.index("(")
        last_par_index = line.index(")")
        is_variable = (line[first_par_index+1 : last_par_index])

        if is_variable == int:
            isCorrect == False
        if is_variable not in variable_list:
            isCorrect == False
        
    return isCorrect
    

# TODO N
def cFree(line, variable_list):

    if "free" in line:
        first_par_index = line.index("(")
        last_par_index = line.index(")")
        is_variable = (line[first_par_index+1 : last_par_index])

        if is_variable == int:
            isCorrect == False
        if is_variable not in variable_list:
            isCorrect == False
    
    return isCorrect
    

# TODO N
def cPop(line, variable_list):

    if "pop" in line:
        first_par_index = line.index("(")
        last_par_index = line.index(")")
        is_variable = (line[first_par_index+1 : last_par_index])

        if is_variable == int:
            isCorrect == False
        if is_variable not in variable_list:
            isCorrect == False
    
    return isCorrect

def cWalk2variables(line):
    pass

# TODO N
def cConditionals(line):
    """open_parenth_size = 0
    close_parenth_size = 0
    for i in line:
        if i == "(":
            open_parenth_size += 1
        if i == ")":
            close_parenth_size += 1
    
    if open_parenth_size != close_parenth_size:
        isCorrect = False
    line.split("(")
    line.split(")")"""
    if line[-2:len(line)] != "fi":
        return "Basura"

    if line[2] != "(":
        return "Basura"
    
    if contar_parentesis(line) >0 and contar_parentesis(line) % 2 != 0:
        return "Basura"
    
    if contar_brackets(line) > 0 and contar_brackets(line) % 2 != 0:
        return "Basura"

    partes = separar_condicional_en_partes(line)
    #print(partes)


    # mayor a 3 por si hay un ELSE
    if len(partes) > 3 or len(partes) == 0:
        return "Basura"
    
    if len(partes) == 2:
        condition = partes[0]

        block = partes[1]
    
    elif len(partes) == 3:
        condition = partes[0]

        block = partes[1]

        else_condition = partes[2]

    #for i in partes:
    print(separar_en_tokens(condition))
    
def contar_parentesis(line):

    open_parenth = 0
    close_parenth = 0

    for i in line:
        if i == "(":
            open_parenth += 1
        
        elif i == ")":
            close_parenth +=1
    
    return open_parenth + close_parenth

def contar_brackets(line):

    open_bracket = 0
    close_bracket = 0

    for i in line:
        if i == "{":
            open_bracket += 1
        
        elif i == "}":
            close_bracket +=1
    
    return open_bracket + close_bracket

def separar_condicional_en_partes(line:str):

    #texto = "if(canWalk(west,1)){walk(west,1)}fi"

    partes = []

    for i in line:
        if i == "{":
            partes.append(line[0 : line.index(i)])
            partes.append(line[line.index(i) : len(line)])
    return partes
    

    


def separar_en_tokens(line:str):

    #line = "i f ( canWalk ( west ,1) ) { walk( west ,1) } fi"
    line = line.replace(" ", "")
    line = line.replace("if", "")
    line = line.replace("fi", "")
    #print(line)

    tokens = []
    #token_found = False
    for i in line:
        if i == "(":
            #print(line.index(i))
            for j in range(1, (len(line)-1)):
                #print(line[j])
                if line[j] == ")":
                    #token_found = True
                    ind_inf = line.index(i)
                    ind_sup = int((j))
                    tokens.append(line[ind_inf:ind_sup+1])
                    #print(tokens)
                    if line.index(i) == 0:
                        #print("broo")
                        line = line[1:j+1] + line[j+2:len(line)] 
                        #print(line)

                        break

                    else:
                        line = line[ind_inf+1:j] + line[j+1:len(line)]
                        #print(line + "2tttt")
                        break
            
                

    #print(token_found)


    #line = line.split(")")
    #print(line)
    return(tokens)




    
    

    

# TODO J
def cLoop(line):
    pass

# TODO J
def cRepeat(line):
    pass